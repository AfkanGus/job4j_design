При реализации шаблона Singleton необходимо
 учитывать проблему с visibility (Видимостью).

Эту проблему можно решать двумя способами используя
volatile или сразу публикуя объект через final.
1. Энергичная загрузка:

1.1. Реализация с применением enum, аналогична однопоточной реализации.
public enum TrackerSingle {
    INSTANCE;

    public Item add(Item model) {
        return model;
    }

    public static void main(String[] args) {
        TrackerSingle tracker = TrackerSingle.INSTANCE;
    }
}
Объект enum создается при загрузке класса и безопасно публикуется всем клиентам.

1.2. Реализация с применением поля final.
public class TrackerSingle {

    private static final TrackerSingle INSTANCE = new TrackerSingle();

    private TrackerSingle() {
    }

    public static TrackerSingle getInstance() {
        return INSTANCE;
    }

    public Item add(Item model) {
        return model;
    }

    public static void main(String[] args) {
        TrackerSingle tracker = TrackerSingle.getInstance();
    }
}


2.3. Holder.

Реализация этого шаблона аналогична однопоточной среде.
public class TrackerSingle {
    private TrackerSingle() {
    }

    public static TrackerSingle getInstance() {
        return Holder.INSTANCE;
    }

    public Item add(Item model) {
        return model;
    }

    private static final class Holder {
        private static final TrackerSingle INSTANCE = new TrackerSingle();
    }

    public static void main(String[] args) {
        TrackerSingle tracker = TrackerSingle.getInstance();
    }
}
Если у вас нет необходимости в ленивой загрузке, то используйте шаблоны из первой группы.
 Например, инициализация кэша или базы данных.

Если в приложении есть затратные ресурсы нужно использовать шаблоны с ленивой загрузкой.
 Здесь можно использовать только один шаблон - это Holder.

Другие шаблоны будут отрицательно влиять на производительность системы.