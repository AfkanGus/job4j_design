package ru.job4j.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Состоять из двух частей, разделённых символом “@”.
 * Левая часть должна состоять из английских букв или цифр, может содержать
 * точки и тире, притом после точки или тире обязательно должна следовать как
 * минимум одна буква.
 * Правая часть должна содержать хотя бы одну точку в конце, после которой
 * должны следовать от двух до четырёх букв.
 * Начинаться обе части должны с буквенных символов.
 */
public class RegularExpression {
    public static void main(String[] args) {
/*
{1,})+”) Так как описанный паттерн левой части должен повторяться, мы обозначим это в следующем виде:
 точка ([\\.]), после которой, опять-таки, обязан следовать буквенный символ:
 {1,} Она содержит буквенные символы в количестве от одной до бесконечности
-  знак тире. “Может быть” означает, что символ будет присутствовать в паттерне либо один раз, либо ни разу  [\\-]:
Pattern pattern = Pattern.compile(“([A-Za-z0-9]{1,}[\\-]{0,1}[A-Za-z0-9]{1,}[\\.]{0,1}[A-Za-z0-9]{1,})+@([A-Za-z0-9]{1,}[\\-]{0,1}[A-Za-z0-9]{1,}[\\.]{0,1}[A-Za-z0-9]{1,})+[\\.]{1}[a-z]{2,4}”);
([\\.]) ([\\-]) все точки и тире => [\\.-]
[A-Za-z0-9] => \\w
+ - означает наличие символа в количестве от одного до бесконечности
? - не более одного раза можно обозначить символом ?:
* -  в паттерне неопределённое количество раз, т.е. {0,}
 */
        Pattern pattern = Pattern.compile("\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*\\.\\w{2,4}");
        Matcher matcher = pattern.matcher("");
        boolean matches = matcher.matches();
    }
}
